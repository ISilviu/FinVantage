"""
Django settings for fin_vantage project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import environ
from celery.schedules import crontab

BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=[])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    "waffle",
    "rest_framework",
    "core",
    "ingestion",
    "embeds",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "waffle.middleware.WaffleMiddleware",
]

ROOT_URLCONF = "fin_vantage.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "fin_vantage.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {"default": env.db()}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Logging

LOG_DIR = env("LOG_PATH")


def get_handler_config(name: str) -> dict:
    return {
        "level": "INFO",
        "class": "logging.handlers.TimedRotatingFileHandler",
        "filename": os.path.join(LOG_DIR, f"{name}.log"),
        "when": "midnight",
        "formatter": "verbose",
        "encoding": "utf-8",
        "backupCount": 30,
    }


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{asctime} {levelname} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "sync_companies": get_handler_config("sync_companies"),
        "schedule_financial_fetching": get_handler_config(
            "schedule_financial_fetching"
        ),
        "fetch_financial_report": get_handler_config("fetch_financial_report"),
        "generate_financial_sentences": get_handler_config(
            "generate_financial_sentences"
        ),
        "build_financial_embeddings": get_handler_config("build_financial_embeddings"),
    },
    "loggers": {
        "sync_companies": {
            "handlers": ["console", "sync_companies"],
            "level": "INFO",
            "propagate": False,
        },
        "schedule_financial_fetching": {
            "handlers": ["console", "schedule_financial_fetching"],
            "level": "INFO",
            "propagate": False,
        },
        "fetch_financial_report": {
            "handlers": ["console", "fetch_financial_report"],
            "level": "INFO",
            "propagate": False,
        },
        "generate_financial_sentences": {
            "handlers": ["console", "generate_financial_sentences"],
            "level": "INFO",
            "propagate": False,
        },
        "build_financial_embeddings": {
            "handlers": ["console", "build_financial_embeddings"],
            "level": "INFO",
            "propagate": False,
        },
    },
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery
CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", default="redis://localhost:6379/0")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

CELERY_BEAT_SCHEDULE = {
    "sync-companies": {
        "task": "ingestion.tasks.sync_companies",
        "schedule": crontab(hour=0),
    },
    "sync-financial-statements": {
        "task": "ingestion.tasks.schedule_financial_fetching",
        "schedule": crontab(hour=1),
    },
    "generate-financial-sentences": {
        "task": "embeds.tasks.generate_financial_sentences",
        "schedule": crontab(hour=4),
    },
}


# Financial API
FINANCIAL_DATA_API_URL = env("FINANCIAL_DATA_API_URL")
FINANCIAL_DATA_API_KEY = env("FINANCIAL_DATA_API_KEY")
STOCK_EXCHANGES = env.list("STOCK_EXCHANGES")
